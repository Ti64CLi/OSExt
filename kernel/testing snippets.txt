	/*
	debug_shell_println("testing timer interrupts");
	disableIRQ();
	
	
	debug_shell_println("testing fast timer 0 interrupt");
	timer_enable(0,0);
	wait_for_interrupt();
	timer_disable(0,0);
	debug_shell_println("testing fast timer 1 interrupt");
	timer_enable(0,1);
	wait_for_interrupt();
	timer_disable(0,1);
	
	
	debug_shell_println("testing first timer 0 interrupt");
	timer_enable(1,0);
	wait_for_interrupt();
	timer_disable(1,0);
	debug_shell_println("testing first timer 1 interrupt");
	timer_enable(1,1);
	wait_for_interrupt();
	timer_disable(1,1);
	
	
	
	
	debug_shell_println("testing second timer 0 interrupt");
	timer_enable(2,0);
	wait_for_interrupt();
	timer_disable(2,0);
	debug_shell_println("testing second timer 1 interrupt");
	timer_enable(2,1);
	wait_for_interrupt();
	timer_disable(2,1);
	*/
	
	
	
	
	/*
	debug_shell_println("installing watchdog fiq");
	timer_disable(1,0);
	timer_set_prescaler(1,0,1);
	timer_set_mode(1,0,1);
	timer_enable(1,0);
	timer_set_load(1,0,2000);
	*/
	
	
	
	/*
	timer_disable(1,0);
	timer_set_prescaler(1,0,1);
	timer_set_mode(1,0,0);
	timer_enable(1,0);
	timer_set_load(1,0,0xffffffff);
	msleep(1000);
	timer_disable(1,0);
	debug_shell_println("msleep(1000), timer ticks: %lld",0xffffffff-timer_value(1,0));
	
	
	
	
	debug_shell_println("testing sleep, screen will flash with an intervall of 1 second");
	keypad_press_release_barrier();
	
	void* flash_framebuffer = get_front_framebuffer_address();
	
	
	
	framebuffer_fillrect(flash_framebuffer,0,0,320,240,255,0,0);
	msleep(1000);
	
	
	
	framebuffer_fillrect(flash_framebuffer,0,0,320,240,0,255,0);
	msleep(1000);
	
	framebuffer_fillrect(flash_framebuffer,0,0,320,240,0,0,255);
	msleep(1000);
	
	framebuffer_fillrect(flash_framebuffer,0,0,320,240,0,0,0);
	debug_shell_reset();
	*/
	
	/*
	
	
	debug_shell_println("double:");
	debug_shell_println("vbatt: %Lfv",adc_read_channel(1));
	debug_shell_println("vsys: %Lfv",adc_read_channel(2));
	debug_shell_println("b12: %Lfv",adc_read_channel(4));
	
	
	
	debug_shell_println("in uint32_t:");
	debug_shell_println("vbatt: %dv",(uint32_t)adc_read_channel(1));
	debug_shell_println("vsys: %dv",(uint32_t)adc_read_channel(2));
	debug_shell_println("b12: %dv",(uint32_t)adc_read_channel(4));
	*/
	
	/*
	NUC_FILE *f = nuc_fopen("/documents/ndless/test2.bmp.tns","rb");
	if (f != NULL)
	{
		struct img565* img = load_bmp_file(f);
		nuc_fclose(f);
		
		
		if (img != NULL)
		{
			framebuffer_draw_img565(get_front_framebuffer_address(),img,0,0);
			keypad_press_release_barrier();
			destroy_img565(img);
		}
	}
	*/

	/*
	i2c_set_port(0xe4);
	debug_shell_println("0xE4: %d",(uint32_t) i2c_read());
	debug_shell_println("0xE5: %d",(uint32_t) i2c_read());
	debug_shell_println("0xE6: %d",(uint32_t) i2c_read());
	debug_shell_println("0xE7: %d",(uint32_t) i2c_read());
	*/
	//debug_shell_println("x: %d, y: %d, maxx: %d, maxy: %d",(uint32_t) touchpad_x_abs(),(uint32_t) touchpad_y_abs(),(uint32_t) touchpad_max_x(),(uint32_t) touchpad_max_y());
	
	/*
	while (true)
	{
		struct touchpad_report rep;
		touchpad_get_report(&rep);
		framebuffer_fillrect(get_back_framebuffer_address(),0,0,320,240,0,0,0);
		char buff[40];
		k_memset(buff,'\0',35);
		DEBUGPRINTLN_1("x: %d,y: %d,p: %d",(uint32_t) rep.x,(uint32_t) rep.y,(uint32_t) rep.pressed)
		sprintf_safe(buff,"x: %d,y: %d,p: %d",30,(uint32_t) rep.x,(uint32_t) rep.y,(uint32_t) rep.pressed);
		framebuffer_write10pstring_ascii(buff,get_back_framebuffer_address(),10,100,255,0,0,ascii10p);
		blitLCDBuffer();
		msleep(5);
	}
	*/


	// unmap the lcd controller to test when the os modifies LCD_UPBASE
	/*
	register uint32_t tt_base asm("r0");
	asm volatile("mrc p15, 0, r0, c2, c0, 0":"=r" (tt_base));
	
	tt_base = tt_base & (~ 0x3ff); // discard the first 14 bits, because they don't matter
	uint32_t *tt = (uint32_t*) tt_base;
	
	
	tt[((uint32_t)LCD_UPBASE)>>20] = 0;
	*/



	/*
	//debug_shell_println("rtc id: 0x%llx",rtc_peripheral_id());
	debug_shell_println("testing rtc alarm, press any key to start");
	keypad_press_release_barrier();
	rtc_set_value(0xfffffffa);
	
	while (timer_seconds_overflows == 0)
	{
		wait_for_interrupt();
	}
	debug_shell_println("rtc alarm fired");
	*/





